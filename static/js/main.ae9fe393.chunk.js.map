{"version":3,"sources":["components/contexts/MyContext.js","components/pages/Home.js","components/pages/Compte.js","components/layout/ThemeToggler.js","components/layout/Navbar.js","components/contexts/MyProvider.js","App.js","serviceWorker.js","index.js"],"names":["MyContext","React","createContext","Home","Consumer","context","className","userName","Compte","type","placeholder","value","onChange","e","changeUserNameHandle","ThemeToggler","onClick","setThemeMode","theme","toUpperCase","Navbar","to","MyProvider","props","useState","setUserName","setTheme","useEffect","document","title","Provider","target","children","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAGeA,EADGC,IAAMC,gBCkBTC,EAjBF,WACX,OACE,kBAAC,EAAUC,SAAX,MACG,SAACC,GAAD,OACC,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cAAcD,EAAQE,SAArC,SACA,yBAAKD,UAAU,oBAAf,8QCWKE,EAjBA,WACb,OACE,kBAAC,EAAUJ,SAAX,MACG,SAACC,GAAD,OACC,yBAAKC,UAAU,UACb,qDACA,2BACEG,KAAK,OACLC,YAAY,cACZC,MAAON,EAAQE,SACfK,SAAU,SAACC,GAAD,OAAOR,EAAQS,qBAAqBD,WCC3CE,EAXM,WACnB,OACE,kBAAC,EAAUX,SAAX,MACG,SAACC,GAAD,OACC,yBAAKC,UAAU,gBAAgBU,QAAS,kBAAMX,EAAQY,iBACpD,8BAAOZ,EAAQa,MAAMC,oBCiBhBC,EAtBA,WACb,OACE,yBAAKd,UAAU,gBACb,kBAAC,IAAD,CAAMA,UAAU,aAAae,GAAG,KAAhC,SAGA,kBAAC,IAAD,CAAMf,UAAU,aAAae,GAAG,KAAhC,QAGA,kBAAC,IAAD,CAAMf,UAAU,aAAae,GAAG,KAAhC,UAGA,kBAAC,IAAD,CAAMf,UAAU,aAAae,GAAG,WAAhC,UAGA,kBAAC,IAAD,CAAMf,UAAU,aAAae,GAAG,KAAhC,WAGA,kBAAC,EAAD,Q,QCASC,EAlBI,SAACC,GAAW,IAAD,EACIC,mBAAS,QADb,mBACrBjB,EADqB,KACXkB,EADW,OAEFD,mBAAS,SAFP,mBAErBN,EAFqB,KAEdQ,EAFc,KAG5BC,qBAAU,WACRC,SAASC,MAAT,gBAA0BtB,KACzB,CAACA,IAOJ,OACE,kBAAC,EAAUuB,SAAX,CAAoBnB,MAAO,CAAEJ,WAAUO,qBAPZ,SAACD,GAC5BY,EAAYZ,EAAEkB,OAAOpB,QAMyCO,QAAOD,aAJpD,WACfS,EAAmB,UAAVR,EAAmB,OAAS,YAIpCK,EAAMS,W,MCKEC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACb,GAAD,OAAW,kBAAC,EAAD,SACzC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,UAAUC,OAAQ,SAACb,GAAD,OAAW,kBAAC,EAAD,aCHrCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae9fe393.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst MyContext = React.createContext();\r\nexport default MyContext;","import React from \"react\";\r\nimport MyContext from \"../contexts/MyContext\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <MyContext.Consumer>\r\n      {(context) => (\r\n        <div className=\"home\">\r\n          <div className=\"home_title\">{context.userName} Blog</div>\r\n          <div className=\"home_description\">\r\n            I am an embedded telecommunication engineer student and a Full-stack\r\n            JavaScript intern. I am interested in web technologies especially\r\n            react and react native with a pang of great hunger for knowledge,\r\n            with a dream to control the force and becoming a react Jedi.\r\n          </div>\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport MyContext from \"../contexts/MyContext\";\r\n\r\nconst Compte = () => {\r\n  return (\r\n    <MyContext.Consumer>\r\n      {(context) => (\r\n        <div className=\"compte\">\r\n          <div>Change Your Username</div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"username...\"\r\n            value={context.userName}\r\n            onChange={(e) => context.changeUserNameHandle(e)}\r\n          />\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\nexport default Compte;\r\n","import React from \"react\";\r\nimport MyContext from \"../contexts/MyContext\";\r\n\r\nconst ThemeToggler = () => {\r\n  return (\r\n    <MyContext.Consumer>\r\n      {(context) => (\r\n        <div className=\"theme_toggler\" onClick={() => context.setThemeMode()}>\r\n          <span>{context.theme.toUpperCase()}</span>\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\nexport default ThemeToggler;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ThemeToggler from \"./ThemeToggler\"\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar_style\">\r\n      <Link className=\"link_style\" to=\"/\">\r\n        ABOUT\r\n      </Link>\r\n      <Link className=\"link_style\" to=\"/\">\r\n        BLOG\r\n      </Link>\r\n      <Link className=\"link_style\" to=\"/\">\r\n        VIDEOS\r\n      </Link>\r\n      <Link className=\"link_style\" to=\"/compte\">\r\n        COMPTE\r\n      </Link>\r\n      <Link className=\"link_style\" to=\"/\">\r\n        CONTACT\r\n      </Link>\r\n      <ThemeToggler />\r\n    </div>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MyContext from \"./MyContext\";\r\n\r\nconst MyProvider = (props) => {\r\n  const [userName, setUserName] = useState(\"User\");\r\n  const [theme, setTheme] = useState(\"light\");\r\n  useEffect(() => {\r\n    document.title = `Hello,${userName}`;\r\n  }, [userName]);\r\n  const changeUserNameHandle = (e) => {\r\n    setUserName(e.target.value);\r\n  };\r\n  const setThemeMode=()=>{\r\n      setTheme(theme === \"light\"? \"dark\" : \"light\");\r\n  }\r\n  return (\r\n    <MyContext.Provider value={{ userName, changeUserNameHandle , theme, setThemeMode }}>\r\n      {props.children}\r\n    </MyContext.Provider>\r\n  );\r\n};\r\nexport default MyProvider;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./components/pages/Home\";\nimport Compte from \"./components/pages/Compte\";\nimport Navbar from \"./components/layout/Navbar\";\nimport MyProvider from \"./components/contexts/MyProvider\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <MyProvider>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path=\"/\" render={(props) => <Home />} />\n          <Route exact path=\"/compte\" render={(props) => <Compte />} />\n        </div>\n      </MyProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}